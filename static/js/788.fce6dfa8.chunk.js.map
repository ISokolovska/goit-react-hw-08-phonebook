{"version":3,"file":"static/js/788.fce6dfa8.chunk.js","mappings":"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","sources":["components/ContactsForm/ContactsForm.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/SignUpForm/SignUpForm.jsx","components/SignInForm/SignInForm.jsx","components/HOK/WithAuthRedirect.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import Notiflix from 'notiflix';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/selectors';\nimport PropTypes from 'prop-types';\nimport { Button, FormControl, FormLabel, Input } from '@chakra-ui/react';\n\nconst ContactsForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleChange = evt => {\n    if (evt.target.name === 'name') {\n      setName(evt.target.value);\n    }\n    if (evt.target.name === 'number') {\n      setNumber(evt.target.value);\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const contact = {\n      name,\n      number,\n    };\n    if (\n      contacts.filter(\n        element => element.name.toLowerCase() === contact.name.toLowerCase()\n      ).length > 0\n    ) {\n      return Notiflix.Notify.warning(`${contact.name} is already in contacts`);\n    }\n    dispatch(addContact(contact));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <FormControl\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n      >\n        <FormLabel variant=\"formLabelText\" mr=\"0px\" mb=\"0px\" color=\"champagne\">\n          Name\n        </FormLabel>\n        <Input\n          variant=\"formInput\"\n          mb=\"20px\"\n          placeholder=\"Name\"\n          type=\"text\"\n          name=\"name\"\n          onChange={handleChange}\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <FormLabel variant=\"formLabelText\" mr=\"0px\" mb=\"0px\" color=\"champagne\">\n          Number\n        </FormLabel>\n        <Input\n          variant=\"formInput\"\n          placeholder=\"Number\"\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"number number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n        <Button variant=\"formButton\" type=\"submit\">\n          Add\n        </Button>\n      </FormControl>\n    </form>\n  );\n};\n\nexport default ContactsForm;\n\nContactsForm.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  handleSubmit: PropTypes.func,\n  handleChange: PropTypes.func,\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { getContacts, getFilter } from 'redux/selectors';\nimport PropTypes from 'prop-types';\nimport { Box, Button, List, ListItem, Text } from '@chakra-ui/react';\nimport { DeleteIcon } from '@chakra-ui/icons';\n\nconst ContactsList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const onFilterContacts = () => {\n    const filteredContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n    return filteredContacts;\n  };\n  const filteredContacts = onFilterContacts();\n\n  return (\n    <Box\n    // display=\"flex\" flexDirection=\"column\" justifyContent=\"center\"\n    >\n      <List\n        mt=\"40px\"\n        // display=\"flex\"\n        // flexDirection=\"column\"\n        // alignItems=\"center\"\n        // className=\"contacts-list\"\n      >\n        {filteredContacts.map(contact => {\n          return (\n            <ListItem\n              display=\"flex\"\n              flexDirection=\"row\"\n              justifyContent=\"space-between\"\n              alignItems=\"center\"\n              w=\"500px\"\n              p=\"5px 10px\"\n              mb=\"15px\"\n              border=\"2px solid\"\n              borderColor=\"yellow\"\n              key={contact.id}\n            >\n              <Text variant=\"formLabelText\" w=\"150px\">\n                {contact.name}:\n              </Text>\n              <Text variant=\"formLabelText\" w=\"150px\">\n                {contact.number}\n              </Text>\n\n              <Button\n                w=\"40px\"\n                h=\"40px\"\n                borderRadius=\"50px\"\n                type=\"submit\"\n                onClick={() => dispatch(deleteContact(contact.id))}\n              >\n                <DeleteIcon boxSize={6} color=\"#FF0000\" />\n              </Button>\n            </ListItem>\n          );\n        })}\n      </List>\n    </Box>\n  );\n};\n\nexport default ContactsList;\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterContact } from 'redux/contacts/contactsSlice';\nimport { getFilter } from 'redux/selectors';\n// import { FilterText } from './Styled';\nimport { FormControl, FormLabel, Input } from '@chakra-ui/react';\n// import { Search2Icon } from '@chakra-ui/icons';\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const setFilterContacts = event => {\n    const { value } = event.target;\n    dispatch(filterContact(value));\n  };\n\n  return (\n    <FormControl\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"flex-start\"\n      mr=\"30px\"\n    >\n      <FormLabel variant=\"formLabelText\" mr=\"0px\" mb=\"5px\">\n        Find contacts by name\n      </FormLabel>\n      <Input\n        variant=\"formInput\"\n        w=\"370px\"\n        h=\"50px\"\n        m=\"0\"\n        border=\"2px solid\"\n        borderColor=\"yellow\"\n        placeholder=\"Find contacts by name\"\n        type=\"text\"\n        id=\"filter\"\n        value={filter}\n        onChange={setFilterContacts}\n      />\n    </FormControl>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const LoaderBox = styled.div`\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  margin: 0 auto;\n`;\n","import React from 'react';\nimport { RotatingLines } from 'react-loader-spinner';\nimport { LoaderBox } from './Loader.styled';\n\nfunction Loader() {\n  return (\n    <LoaderBox>\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n    </LoaderBox>\n  );\n}\n\nexport default Loader;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { signUp } from 'redux/users/operations';\nimport PropTypes from 'prop-types';\nimport { FormControl, FormLabel, Input, Button } from '@chakra-ui/react';\n\nfunction SignUpForm({ isLoading }) {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  console.log(setShowPassword);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setFormData(prevState => ({ ...prevState, [name]: value }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const finalData = {\n      name: formData.name,\n      email: formData.email,\n      password: formData.password,\n    };\n    console.log(finalData);\n    dispatch(signUp(finalData));\n    reset();\n  };\n\n  const reset = () => {\n    setFormData({\n      name: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} autoComplete=\"off\">\n      <FormControl\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n      >\n        <FormLabel variant=\"formLabelText\" fontSize=\"18px\" mr=\"0px\" mb=\"0px\">\n          Name:\n        </FormLabel>\n        <Input\n          variant=\"formInput\"\n          mb=\"20px\"\n          placeholder=\"Name\"\n          type=\"text\"\n          name=\"name\"\n          value={formData.name}\n          onChange={handleChange}\n          required\n        ></Input>\n        <FormLabel variant=\"formLabelText\" mr=\"0px\" mb=\"0px\">\n          Email:\n        </FormLabel>\n        <Input\n          variant=\"formInput\"\n          mb=\"20px\"\n          placeholder=\"Email\"\n          type=\"text\"\n          name=\"email\"\n          value={formData.email}\n          onChange={handleChange}\n          required\n        ></Input>\n        <FormLabel variant=\"formLabelText\" mr=\"0px\" mb=\"0px\">\n          Password:\n        </FormLabel>\n        <Input\n          variant=\"formInput\"\n          mb=\"0\"\n          type={showPassword ? 'text' : 'password'}\n          min={7}\n          placeholder=\"********\"\n          name=\"password\"\n          value={formData.password}\n          onChange={handleChange}\n          required\n        />\n        <Button variant=\"formButton\" type=\"submit\" disabled={isLoading}>\n          Sign Up\n        </Button>\n      </FormControl>\n    </form>\n  );\n}\n\nexport default SignUpForm;\n\nSignUpForm.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    password: PropTypes.string.isRequired,\n  }),\n  handleSubmit: PropTypes.func,\n  handleChange: PropTypes.func,\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { signIn } from 'redux/users/operations';\nimport { Button, FormControl, FormLabel, Input } from '@chakra-ui/react';\nfunction SignInForm({ isLoading }) {\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  console.log(setShowPassword);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setFormData(prevState => ({ ...prevState, [name]: value }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const finalData = {\n      email: formData.email,\n      password: formData.password,\n    };\n    console.log(finalData);\n    dispatch(signIn(finalData));\n    reset();\n  };\n\n  const reset = () => {\n    setFormData({\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} autoComplete=\"off\">\n      <FormControl\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n      >\n        <FormLabel variant=\"formLabelText\" mr=\"0px\" mb=\"0px\">\n          Email:\n        </FormLabel>\n        <Input\n          variant=\"formInput\"\n          mb=\"20px\"\n          placeholder=\"Email\"\n          type=\"text\"\n          name=\"email\"\n          value={formData.email}\n          onChange={handleChange}\n          required\n        ></Input>\n        <FormLabel variant=\"formLabelText\" mr=\"0px\" mb=\"0px\">\n          Password:\n        </FormLabel>\n\n        <Input\n          variant=\"formInput\"\n          mb=\"0\"\n          type={showPassword ? 'text' : 'password'}\n          min={7}\n          placeholder=\"********\"\n          name=\"password\"\n          value={formData.password}\n          onChange={handleChange}\n          required\n        ></Input>\n\n        <Button variant=\"formButton\" type=\"submit\" disabled={isLoading}>\n          Sign In\n        </Button>\n      </FormControl>\n    </form>\n  );\n}\n\nexport default SignInForm;\n\nSignInForm.propTypes = {\n  user: PropTypes.shape({\n    email: PropTypes.string.isRequired,\n    password: PropTypes.string.isRequired,\n  }),\n  handleSubmit: PropTypes.func,\n  handleChange: PropTypes.func,\n};\n","import { Navigate } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { getUser } from 'redux/selectors';\n\nfunction WithAuthRedirect(Component, navigateTo) {\n  const ComponentWithRedirect = props => {\n    const user = useSelector(getUser);\n    const isLoggedIn = user?.email ?? null;\n\n    return isLoggedIn ? <Component {...props} /> : <Navigate to={navigateTo} />;\n  };\n\n  return ComponentWithRedirect;\n}\n\nexport default WithAuthRedirect;\n","import { Box, Button } from '@chakra-ui/react';\nimport { ContactsForm, ContactsList, Filter } from 'components';\nimport WithAuthRedirect from 'components/HOK/WithAuthRedirect';\nimport { AddIcon, CloseIcon } from '@chakra-ui/icons';\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { getError, getIsLoading } from 'redux/selectors';\n\nfunction ContactsPage() {\n  const [isOpen, setIsOpen] = useState(false);\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n  const dispatch = useDispatch();\n\n  const handelKeyDown = useCallback(\n    event => {\n      if (event.code === 'Escape') {\n        // reset();\n        setIsOpen(!isOpen);\n      }\n    },\n    [isOpen]\n  );\n\n  const handleBackDropClick = event => {\n    if (event.currentTarget === event.target) {\n      // reset();\n      setIsOpen(!isOpen);\n    }\n  };\n\n  useEffect(() => {\n    window.addEventListener('keydown', handelKeyDown);\n\n    return () => {\n      window.removeEventListener('keydown', handelKeyDown);\n    };\n  }, [handelKeyDown]);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"column\"\n      alignItems=\"center\"\n      m=\"0 auto\"\n      bg=\"champagne\"\n      maxWidth=\"1200px\"\n      h=\"100vh\"\n      p=\"60px 30px \"\n    >\n      {isOpen && (\n        <Box\n          onClick={handleBackDropClick}\n          position=\"fixed\"\n          top=\"0\"\n          left=\"0\"\n          width=\"100vw\"\n          height=\"100vh\"\n          background=\"rgba(0, 0, 0, 0.25)\"\n        >\n          <Box\n            display=\"flex\"\n            flexDirection=\"column\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            position=\"absolute\"\n            top=\"50%\"\n            left=\"50%\"\n            transform=\"translate(-50%, -50%)\"\n            bg=\"darkBlue\"\n            w=\"400px\"\n            p=\"15px 30px 30px\"\n            m=\"auto\"\n            border=\"1px solid darkBlue\"\n            borderRadius=\"20px\"\n          >\n            <Button\n              type=\"button\"\n              size=\"xs\"\n              p=\"0\"\n              mb=\"20px\"\n              left=\"48%\"\n              borderRadius=\"50px\"\n              onClick={() => {\n                // reset();\n                setIsOpen(!isOpen);\n              }}\n            >\n              <CloseIcon boxSize=\"10px\" />\n            </Button>\n            <ContactsForm />\n          </Box>\n        </Box>\n      )}\n\n      {isLoading && !error && <b>Request in progress...</b>}\n      {!isOpen && (\n        <>\n          <Box display=\"flex\" flexDir=\"row-reverse\" alignItems=\"center\">\n            <Button\n              type=\"click\"\n              variant=\"addButton\"\n              onClick={() => {\n                // dispatch(cleanError());\n                setIsOpen(!isOpen);\n              }}\n            >\n              <AddIcon boxSize={6} />\n            </Button>\n            <Filter />\n          </Box>\n          <ContactsList />\n        </>\n      )}\n    </Box>\n  );\n}\n\nexport default WithAuthRedirect(ContactsPage, '/sign-in');\n"],"names":["useState","name","setName","number","setNumber","dispatch","useDispatch","contacts","useSelector","getContacts","handleChange","evt","target","value","reset","onSubmit","preventDefault","contact","filter","element","toLowerCase","length","Notiflix","addContact","display","flexDirection","justifyContent","variant","mr","mb","color","placeholder","type","onChange","pattern","title","required","getFilter","filteredContacts","includes","mt","map","alignItems","w","p","border","borderColor","h","borderRadius","onClick","deleteContact","id","boxSize","m","event","filterContact","styled","isLoading","email","password","formData","setFormData","showPassword","setShowPassword","console","log","e","prevState","finalData","signUp","autoComplete","fontSize","min","disabled","signIn","Component","navigateTo","props","user","getUser","to","WithAuthRedirect","isOpen","setIsOpen","getIsLoading","error","getError","handelKeyDown","useCallback","code","useEffect","window","addEventListener","removeEventListener","fetchContacts","bg","maxWidth","currentTarget","position","top","left","width","height","background","transform","size","flexDir"],"sourceRoot":""}