{"version":3,"file":"static/js/235.464365db.chunk.js","mappings":"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","sources":["components/ContactsForm/ContactsForm.jsx","components/ContactsList/ContactsList.jsx","components/Filter/Filter.jsx","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/SignUpForm/SignUpForm.jsx","components/SignInForm/SignInForm.jsx","pages/SignUpPage.jsx"],"sourcesContent":["import Notiflix from 'notiflix';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/selectors';\nimport PropTypes from 'prop-types';\nimport { Button, FormControl, FormLabel, Input } from '@chakra-ui/react';\n\nconst ContactsForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleChange = evt => {\n    if (evt.target.name === 'name') {\n      setName(evt.target.value);\n    }\n    if (evt.target.name === 'number') {\n      setNumber(evt.target.value);\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const contact = {\n      name,\n      number,\n    };\n    if (\n      contacts.filter(\n        element => element.name.toLowerCase() === contact.name.toLowerCase()\n      ).length > 0\n    ) {\n      return Notiflix.Notify.warning(`${contact.name} is already in contacts`);\n    }\n    dispatch(addContact(contact));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <FormControl\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n      >\n        <FormLabel variant=\"formLabelText\" mr=\"0px\" mb=\"0px\" color=\"champagne\">\n          Name\n        </FormLabel>\n        <Input\n          variant=\"formInput\"\n          mb=\"20px\"\n          placeholder=\"Name\"\n          type=\"text\"\n          name=\"name\"\n          onChange={handleChange}\n          value={name}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <FormLabel variant=\"formLabelText\" mr=\"0px\" mb=\"0px\" color=\"champagne\">\n          Number\n        </FormLabel>\n        <Input\n          variant=\"formInput\"\n          placeholder=\"Number\"\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"/^(\\+?\\d{0,4})?\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{3}\\)?)\\s?-?\\s?(\\(?\\d{4}\\)?)?$/\"\n          maxLength=\"13\"\n          title=\"/^\\+380\\d{9}$/u, 'Please, use only  +  and numbers'\"\n          required\n        />\n        <Button variant=\"formButton\" type=\"submit\">\n          Add\n        </Button>\n      </FormControl>\n    </form>\n  );\n};\n\nexport default ContactsForm;\n\nContactsForm.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  handleSubmit: PropTypes.func,\n  handleChange: PropTypes.func,\n};\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { getContacts, getFilter } from 'redux/selectors';\nimport PropTypes from 'prop-types';\nimport { Box, Button, List, ListItem, Text } from '@chakra-ui/react';\nimport { DeleteIcon } from '@chakra-ui/icons';\n\nconst ContactsList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const onFilterContacts = () => {\n    const filteredContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n    return filteredContacts;\n  };\n  const filteredContacts = onFilterContacts();\n\n  return (\n    <Box\n    // display=\"flex\" flexDirection=\"column\" justifyContent=\"center\"\n    >\n      <List\n        mt=\"40px\"\n        // display=\"flex\"\n        // flexDirection=\"column\"\n        // alignItems=\"center\"\n        // className=\"contacts-list\"\n      >\n        {filteredContacts.map(contact => {\n          return (\n            <ListItem\n              display=\"flex\"\n              flexDirection=\"row\"\n              justifyContent=\"space-between\"\n              alignItems=\"center\"\n              w={{ base: '100%', lg: '500px' }}\n              p=\"5px 10px\"\n              mb=\"15px\"\n              border=\"2px solid\"\n              borderColor=\"yellow\"\n              key={contact.id}\n            >\n              <Text variant=\"formLabelText\" w={{ base: '110px', md: '150px' }}>\n                {contact.name}:\n              </Text>\n              <Text variant=\"formLabelText\" w={{ base: '110px', md: '150px' }}>\n                {contact.number}\n              </Text>\n\n              <Button\n                w=\"40px\"\n                h=\"40px\"\n                borderRadius=\"50px\"\n                type=\"submit\"\n                onClick={() => dispatch(deleteContact(contact.id))}\n              >\n                <DeleteIcon boxSize={6} color=\"#FF0000\" />\n              </Button>\n            </ListItem>\n          );\n        })}\n      </List>\n    </Box>\n  );\n};\n\nexport default ContactsList;\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterContact } from 'redux/contacts/contactsSlice';\nimport { getFilter } from 'redux/selectors';\n// import { FilterText } from './Styled';\nimport { FormControl, FormLabel, Input } from '@chakra-ui/react';\n// import { Search2Icon } from '@chakra-ui/icons';\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const setFilterContacts = event => {\n    const { value } = event.target;\n    dispatch(filterContact(value));\n  };\n\n  return (\n    <FormControl\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"flex-start\"\n      mr=\"30px\"\n    >\n      <FormLabel variant=\"formLabelText\" mr=\"0px\" mb=\"5px\">\n        Find contacts by name\n      </FormLabel>\n      <Input\n        variant=\"formInput\"\n        w={{ base: '100%', lg: '370px' }}\n        h=\"50px\"\n        m=\"0\"\n        border=\"2px solid\"\n        borderColor=\"yellow\"\n        placeholder=\"Find contacts by name\"\n        type=\"text\"\n        id=\"filter\"\n        value={filter}\n        onChange={setFilterContacts}\n      />\n    </FormControl>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const LoaderBox = styled.div`\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  margin: 0 auto;\n`;\n","import React from 'react';\nimport { RotatingLines } from 'react-loader-spinner';\nimport { LoaderBox } from './Loader.styled';\n\nfunction Loader() {\n  return (\n    <LoaderBox>\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n    </LoaderBox>\n  );\n}\n\nexport default Loader;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { signUp } from 'redux/users/operations';\nimport PropTypes from 'prop-types';\nimport { FormControl, FormLabel, Input, Button } from '@chakra-ui/react';\n\nfunction SignUpForm({ isLoading }) {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  console.log(setShowPassword);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setFormData(prevState => ({ ...prevState, [name]: value }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const finalData = {\n      name: formData.name,\n      email: formData.email,\n      password: formData.password,\n    };\n    console.log(finalData);\n    dispatch(signUp(finalData));\n    reset();\n  };\n\n  const reset = () => {\n    setFormData({\n      name: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} autoComplete=\"off\">\n      <FormControl\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n      >\n        <FormLabel variant=\"formLabelText\" fontSize=\"18px\" mr=\"0px\" mb=\"0px\">\n          Name:\n        </FormLabel>\n        <Input\n          variant=\"formInput\"\n          mb=\"20px\"\n          placeholder=\"Name\"\n          type=\"text\"\n          name=\"name\"\n          value={formData.name}\n          onChange={handleChange}\n          required\n        ></Input>\n        <FormLabel variant=\"formLabelText\" mr=\"0px\" mb=\"0px\">\n          Email:\n        </FormLabel>\n        <Input\n          variant=\"formInput\"\n          mb=\"20px\"\n          placeholder=\"Email\"\n          type=\"text\"\n          name=\"email\"\n          value={formData.email}\n          onChange={handleChange}\n          required\n        ></Input>\n        <FormLabel variant=\"formLabelText\" mr=\"0px\" mb=\"0px\">\n          Password:\n        </FormLabel>\n        <Input\n          variant=\"formInput\"\n          mb=\"0\"\n          type={showPassword ? 'text' : 'password'}\n          min={7}\n          placeholder=\"********\"\n          name=\"password\"\n          value={formData.password}\n          onChange={handleChange}\n          required\n        />\n        <Button variant=\"formButton\" type=\"submit\" disabled={isLoading}>\n          Sign Up\n        </Button>\n      </FormControl>\n    </form>\n  );\n}\n\nexport default SignUpForm;\n\nSignUpForm.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    password: PropTypes.string.isRequired,\n  }),\n  handleSubmit: PropTypes.func,\n  handleChange: PropTypes.func,\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { signIn } from 'redux/users/operations';\nimport { Button, FormControl, FormLabel, Input } from '@chakra-ui/react';\nfunction SignInForm({ isLoading }) {\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n  });\n  const [showPassword, setShowPassword] = useState(false);\n  console.log(setShowPassword);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setFormData(prevState => ({ ...prevState, [name]: value }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const finalData = {\n      email: formData.email,\n      password: formData.password,\n    };\n    console.log(finalData);\n    dispatch(signIn(finalData));\n    reset();\n  };\n\n  const reset = () => {\n    setFormData({\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <form onSubmit={handleSubmit} autoComplete=\"off\">\n      <FormControl\n        display=\"flex\"\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n      >\n        <FormLabel variant=\"formLabelText\" mr=\"0px\" mb=\"0px\">\n          Email:\n        </FormLabel>\n        <Input\n          variant=\"formInput\"\n          mb=\"20px\"\n          placeholder=\"Email\"\n          type=\"text\"\n          name=\"email\"\n          value={formData.email}\n          onChange={handleChange}\n          required\n        ></Input>\n        <FormLabel variant=\"formLabelText\" mr=\"0px\" mb=\"0px\">\n          Password:\n        </FormLabel>\n\n        <Input\n          variant=\"formInput\"\n          mb=\"0\"\n          type={showPassword ? 'text' : 'password'}\n          min={7}\n          placeholder=\"********\"\n          name=\"password\"\n          value={formData.password}\n          onChange={handleChange}\n          required\n        ></Input>\n\n        <Button variant=\"formButton\" type=\"submit\" disabled={isLoading}>\n          Sign In\n        </Button>\n      </FormControl>\n    </form>\n  );\n}\n\nexport default SignInForm;\n\nSignInForm.propTypes = {\n  user: PropTypes.shape({\n    email: PropTypes.string.isRequired,\n    password: PropTypes.string.isRequired,\n  }),\n  handleSubmit: PropTypes.func,\n  handleChange: PropTypes.func,\n};\n","import React, { useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport { SignUpForm } from 'components';\nimport { useNavigate } from 'react-router';\nimport { Box, Flex, Heading } from '@chakra-ui/react';\n\nfunction SignUpPage() {\n  const { isLoading, error, user } = useSelector(state => state.userData);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    if (!user?.email) return;\n\n    navigate('/contacts');\n  }, [user, navigate]);\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDirection=\"column\"\n      justifyContent=\"center\"\n      alignItems=\"center\"\n      m=\"auto\"\n      bg=\"champagne\"\n      maxWidth=\"1280px\"\n      h=\"100vh\"\n      p=\"60px 30px \"\n    >\n      <Flex\n        flexDirection=\"column\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        w={{ base: '100%', md: '400px' }}\n        p=\"30px\"\n        border=\"2px solid \"\n        borderColor=\"yellow\"\n        borderRadius=\"20px\"\n        bg=\"white\"\n      >\n        <Heading variant=\"formTitleText\" mb=\"30px\">\n          Please, register !\n        </Heading>\n        {error.length > 0 && <p>Some error occured... With message {error}</p>}\n        <SignUpForm isLoading={isLoading} />\n      </Flex>\n    </Box>\n  );\n}\nexport default SignUpPage;\n"],"names":["useState","name","setName","number","setNumber","dispatch","useDispatch","contacts","useSelector","getContacts","handleChange","evt","target","value","reset","onSubmit","preventDefault","contact","filter","element","toLowerCase","length","Notiflix","addContact","display","flexDirection","justifyContent","variant","mr","mb","color","placeholder","type","onChange","pattern","title","required","maxLength","getFilter","filteredContacts","includes","mt","map","alignItems","w","base","lg","p","border","borderColor","md","h","borderRadius","onClick","deleteContact","id","boxSize","m","event","filterContact","styled","isLoading","email","password","formData","setFormData","showPassword","setShowPassword","console","log","e","prevState","finalData","signUp","autoComplete","fontSize","min","disabled","signIn","state","userData","error","user","navigate","useNavigate","useEffect","bg","maxWidth"],"sourceRoot":""}