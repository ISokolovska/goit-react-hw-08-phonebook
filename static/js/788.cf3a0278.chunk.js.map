{"version":3,"file":"static/js/788.cf3a0278.chunk.js","mappings":"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","sources":["components/ContactsForm/ContactsForm.jsx","components/ContactsList/Styled.js","components/ContactsList/ContactsList.jsx","components/Filter/Styled.js","components/Filter/Filter.jsx","components/Loader/Styled.js","components/Loader/Loader.jsx","components/SignUpForm/Styled.js","components/SignUpForm/SignUpForm.jsx","components/SignInForm/SignInForm.jsx","components/HOK/WithAuthRedirect.jsx","pages/ContactsPage.jsx"],"sourcesContent":["import Notiflix from 'notiflix';\nimport React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { getContacts } from 'redux/selectors';\nimport PropTypes from 'prop-types';\nimport { Input } from '@chakra-ui/react';\nimport { AddContactsFormContainer, Formlabel, Button } from './Styled';\n\nconst ContactsForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleChange = evt => {\n    if (evt.target.name === 'name') {\n      setName(evt.target.value);\n    }\n    if (evt.target.name === 'number') {\n      setNumber(evt.target.value);\n    }\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const contact = {\n      name,\n      number,\n    };\n    if (\n      contacts.filter(\n        element => element.name.toLowerCase() === contact.name.toLowerCase()\n      ).length > 0\n    ) {\n      return Notiflix.Notify.warning(`${contact.name} is already in contacts`);\n    }\n    dispatch(addContact(contact));\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <AddContactsFormContainer onSubmit={handleSubmit}>\n      <Formlabel>Name</Formlabel>\n      <Input\n        type=\"text\"\n        name=\"name\"\n        onChange={handleChange}\n        value={name}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        size=\"md\"\n        w=\"400px\"\n      />\n\n      <Formlabel htmlFor=\"number\">number</Formlabel>\n      <Input\n        type=\"tel\"\n        name=\"number\"\n        value={number}\n        onChange={handleChange}\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"number number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        size=\"md\"\n      />\n      <Button type=\"submit\">Add</Button>\n    </AddContactsFormContainer>\n  );\n};\n\nexport default ContactsForm;\n\nContactsForm.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n  handleSubmit: PropTypes.func,\n  handleChange: PropTypes.func,\n};\n","import styled from 'styled-components';\n\nexport const Contact = styled.span`\n  margin-right: 50px;\n  font-size: 35px;\n  font-weight: 400;\n`;\n\nexport const ContactsWrapper = styled.ul`\n  display: flex;\n  flex-direction: column;\n  align-items: flex-end;\n  margin: 0 auto;\n  padding: 0;\n  list-style: none;\n`;\n\nexport const ContactsItem = styled.li`\n  display: flex;\n  justify-content: baseline;\n  align-items: center;\n  margin-bottom: 10px;\n`;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { getContacts, getFilter } from 'redux/selectors';\nimport PropTypes from 'prop-types';\nimport { Button } from '../ContactsForm/Styled';\nimport { Contact, ContactsItem, ContactsWrapper } from './Styled';\n\nconst ContactsList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const onFilterContacts = () => {\n    const filteredContacts = contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n    return filteredContacts;\n  };\n  const filteredContacts = onFilterContacts();\n\n  return (\n    <ContactsWrapper className=\"contacts-list\">\n      {filteredContacts.map(contact => {\n        return (\n          <ContactsItem key={contact.id}>\n            <Contact>\n              {contact.name}: {contact.number}\n            </Contact>\n            <Button\n              type=\"submit\"\n              onClick={() => dispatch(deleteContact(contact.id))}\n            >\n              Delete\n            </Button>\n          </ContactsItem>\n        );\n      })}\n    </ContactsWrapper>\n  );\n};\n\nexport default ContactsList;\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import styled from 'styled-components';\n\nexport const FilterContacts = styled.input`\n  width: 100%;\n  padding: 20px 25px;\n  margin-top: 20px;\n  margin-bottom: 20px;\n  font-size: 35px;\n  font-weight: 400;\n  border-radius: 50px;\n`;\n\nexport const FilterText = styled.p`\n  margin-top: 0;\n  margin-bottom: 0;\n  font-size: 35px;\n  font-weight: 600;\n`;\n","import { Input } from '@chakra-ui/react';\nimport React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { filterContact } from 'redux/contacts/contactsSlice';\nimport { getFilter } from 'redux/selectors';\nimport { FilterText } from './Styled';\n\nconst Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  const setFilterContacts = event => {\n    const { value } = event.target;\n    dispatch(filterContact(value));\n  };\n\n  return (\n    <label htmlFor=\"filter\">\n      <FilterText>Find contacts by name</FilterText>\n      <Input\n        type=\"text\"\n        id=\"filter\"\n        value={filter}\n        onChange={setFilterContacts}\n      />\n    </label>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const LoaderBox = styled.div`\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 100%;\n  margin: 0 auto;\n`;\n","import React from 'react';\nimport { RotatingLines } from 'react-loader-spinner';\nimport { LoaderBox } from './Styled';\n\nfunction Loader() {\n  return (\n    <LoaderBox>\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n    </LoaderBox>\n  );\n}\n\nexport default Loader;\n","import styled from 'styled-components';\n\nexport const FormSignUp = styled.form`\n  display: flex;\n  flex-direction: column;\n`;\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { signUp } from 'redux/users/operations';\nimport PropTypes from 'prop-types';\nimport { FormSignUp } from './Styled';\n\nfunction SignUpForm({ isLoading }) {\n  const [formData, setFormData] = useState({\n    name: '',\n    email: '',\n    password: '',\n  });\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setFormData(prevState => ({ ...prevState, [name]: value }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const finalData = {\n      name: formData.name,\n      email: formData.email,\n      password: formData.password,\n    };\n    console.log(finalData);\n    dispatch(signUp(finalData));\n    reset();\n  };\n\n  const reset = () => {\n    setFormData({\n      name: '',\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <div>\n      <h1>Registration page </h1>\n      <FormSignUp onSubmit={handleSubmit} autoComplete=\"off\">\n        <label>\n          <span>Name:</span>\n          <input\n            type=\"text\"\n            name=\"name\"\n            value={formData.name}\n            onChange={handleChange}\n            required\n          ></input>\n        </label>\n        <label>\n          <span>Email:</span>\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleChange}\n            required\n          ></input>\n        </label>\n        <label>\n          <span>Password:</span>\n          <input\n            type=\"text\"\n            name=\"password\"\n            value={formData.password}\n            onChange={handleChange}\n            required\n          ></input>\n        </label>\n        <button type=\"submit\" disabled={isLoading}>\n          Sign Up\n        </button>\n      </FormSignUp>\n    </div>\n  );\n}\n\nexport default SignUpForm;\n\nSignUpForm.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    email: PropTypes.string.isRequired,\n    password: PropTypes.string.isRequired,\n  }),\n  handleSubmit: PropTypes.func,\n  handleChange: PropTypes.func,\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport PropTypes from 'prop-types';\nimport { signIn } from 'redux/users/operations';\n\nfunction SignInForm({ isLoading }) {\n  const [formData, setFormData] = useState({\n    email: '',\n    password: '',\n  });\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    setFormData(prevState => ({ ...prevState, [name]: value }));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const finalData = {\n      email: formData.email,\n      password: formData.password,\n    };\n    console.log(finalData);\n    dispatch(signIn(finalData));\n    reset();\n  };\n\n  const reset = () => {\n    setFormData({\n      email: '',\n      password: '',\n    });\n  };\n\n  return (\n    <div>\n      <h1>Authorization page </h1>\n      <form onSubmit={handleSubmit} autoComplete=\"off\">\n        <label>\n          <span>Email:</span>\n          <input\n            type=\"text\"\n            name=\"email\"\n            value={formData.email}\n            onChange={handleChange}\n            required\n          ></input>\n        </label>\n        <label>\n          <span>Password:</span>\n          <input\n            type=\"text\"\n            name=\"password\"\n            value={formData.password}\n            onChange={handleChange}\n            required\n          ></input>\n        </label>\n        <button type=\"submit\" disabled={isLoading}>\n          Sign In\n        </button>\n      </form>\n    </div>\n  );\n}\n\nexport default SignInForm;\n\nSignInForm.propTypes = {\n  user: PropTypes.shape({\n    email: PropTypes.string.isRequired,\n    password: PropTypes.string.isRequired,\n  }),\n  handleSubmit: PropTypes.func,\n  handleChange: PropTypes.func,\n};\n","import { Navigate } from 'react-router-dom';\nimport { useSelector } from 'react-redux';\nimport { getUser } from 'redux/selectors';\n\nfunction WithAuthRedirect(Component, navigateTo) {\n  const ComponentWithRedirect = props => {\n    const user = useSelector(getUser);\n    const isLoggedIn = user?.email ?? null;\n\n    return isLoggedIn ? <Component {...props} /> : <Navigate to={navigateTo} />;\n  };\n\n  return ComponentWithRedirect;\n}\n\nexport default WithAuthRedirect;\n","import { ContactsForm, ContactsList, Filter } from 'components';\nimport WithAuthRedirect from 'components/HOK/WithAuthRedirect';\nimport { TitleContacts } from 'components/Styled';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { getError, getIsLoading } from 'redux/selectors';\n\nfunction ContactsPage() {\n  const isLoading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactsForm />\n      {isLoading && !error && <b>Request in progress...</b>}\n      <TitleContacts>Contacts</TitleContacts>\n      <Filter />\n      <ContactsList />\n    </div>\n  );\n}\n// export default ContactsPage;\nexport default WithAuthRedirect(ContactsPage, '/sign-in');\n"],"names":["useState","name","setName","number","setNumber","dispatch","useDispatch","contacts","useSelector","getContacts","handleChange","evt","target","value","reset","onSubmit","preventDefault","contact","filter","element","toLowerCase","length","Notiflix","addContact","type","onChange","pattern","title","required","size","w","htmlFor","Contact","styled","ContactsWrapper","ContactsItem","getFilter","filteredContacts","includes","className","map","onClick","deleteContact","id","FilterText","event","filterContact","FormSignUp","isLoading","email","password","formData","setFormData","e","prevState","finalData","console","log","signUp","autoComplete","disabled","signIn","Component","navigateTo","props","user","getUser","to","WithAuthRedirect","getIsLoading","error","getError","useEffect","fetchContacts"],"sourceRoot":""}